// Generated by CoffeeScript 1.7.1
(function() {
  define('./services/Products', function(require, exports, module) {
    var Products;
    Products = (function() {
      function Products(breeze, logger) {
        var metadataHelper, metadataStore, modelNamespace, serviceName;
        this.breeze = breeze;
        this.logger = logger;
        serviceName = "https://iwishuadata.azure-mobile.net/";
        modelNamespace = "Iwishua.Models";
        this.modelName = "iwishuaproducts";
        metadataStore = new this.breeze.MetadataStore({
          namingConvention: this.breeze.NamingConvention.camelCase
        });
        metadataHelper = new this.breeze.config.MetadataHelper(modelNamespace);
        metadataHelper.addTypeToStore(metadataStore, {
          namespace: modelNamespace,
          shortName: this.modelName,
          defaultResourceName: this.modelName,
          dataProperties: {
            id: {
              maxLength: 36
            },
            productId: {
              maxLength: 36
            },
            productTitle: {
              maxLength: 4000
            },
            productDescription: {
              maxLength: 4000
            },
            productImageUrl: {
              maxLength: 4000
            },
            productBuyUrl: {
              maxLength: 4000
            },
            productKeywords: {
              maxLength: 4000
            },
            impressionUrl: {
              maxLength: 4000
            },
            isPublished: {
              dataType: this.breeze.DataType.Boolean
            }
          }
        });
        metadataHelper.addDataService(metadataStore, serviceName);
        this.entityManager = new this.breeze.EntityManager({
          metadataStore: metadataStore,
          serviceName: serviceName
        });
      }

      Products.prototype.getProducts = function(skip, take) {
        var query;
        if (skip == null) {
          skip = 0;
        }
        if (take == null) {
          take = 5;
        }
        query = this.breeze.EntityQuery.from("tables/" + this.modelName).skip(parseInt(skip, 10)).take(parseInt(take, 10)).where('isPublished', 'eq', true).inlineCount(true);
        return this.entityManager.executeQuery(query)["catch"]((function(_this) {
          return function(error) {
            _this.logger.error(error.message, "Query failed");
            throw error;
          };
        })(this));
      };

      Products.prototype.parseProducts = function($scope, data) {
        var attrs, name, title, word, words, _i, _j, _len, _len1, _ref, _ref1, _results;
        $scope.count = data.results[0].count;
        $scope.products = data.results[0].results;
        _ref = $scope.products;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attrs = _ref[_i];
          title = attrs.productTitle;
          if (title.slice(0, 1) === '"') {
            title = title.slice(1, -1);
          }
          words = title.replace(/[-,.©®™]/g, ' ').replace(/([a-z])([A-Z])/g, "$1 $2").split(/\s+/);
          title = words.join(' ');
          attrs.productTitle = title;
          name = '';
          while (!(name.length > 20 || words.length === 0)) {
            name = words.pop() + ' ' + name.substr(0, 1).toUpperCase() + name.substr(1);
          }
          attrs.productName = name;
          attrs.className = 'ww2';
          _ref1 = name.split(/\s+/);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            word = _ref1[_j];
            if (word.length > 7) {
              attrs.className = 'hh2';
            }
          }
          if (attrs.className === 'ww2') {
            if ((Math.floor(Math.random() * new Date().getTime())) & 1) {
              _results.push(attrs.aligned = 'alignleft');
            } else {
              _results.push(attrs.aligned = 'alignright');
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return Products;

    })();
    return module.exports = Products;
  });

}).call(this);
